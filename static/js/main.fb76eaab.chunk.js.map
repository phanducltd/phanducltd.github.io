{"version":3,"sources":["pages/lists.js","pages/modalAdd.js","pages/index.js","App.js","reportWebVitals.js","index.js"],"names":["Lists","data","setData","setStateModal","map","item","style","margin","xs","lg","width","height","preview","src","url","name","icon","placement","okText","onClick","value","id","isModalVisible","cancelText","newData","filter","d","localStorage","setItem","JSON","stringify","onClickDelete","MoreOutlined","layout","labelCol","span","wrapperCol","tailLayout","offset","ModalAdd","stateModal","Form","useForm","form","itemCrud","find","setFieldsValue","resetFields","PlusSquareOutlined","type","title","top","visible","closable","footer","initialValues","remember","onFinish","values","dataEdit","Date","now","toString","unshift","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","htmlType","ListCrud","useState","parse","getItem","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb76eaab.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Image, Popconfirm } from 'antd'\r\nimport { MoreOutlined } from '@ant-design/icons'\r\n\r\nconst Lists = ({ data, setData, setStateModal }) => {\r\n\r\n    const onClickDelete = (value) => {\r\n        let newData = data.filter(d => d.id !== value)\r\n        localStorage.setItem(\"crud\", JSON.stringify(newData))\r\n        setData(newData)\r\n    }\r\n\r\n    const onClickEdit = (value) => {\r\n        setStateModal({\r\n            isModalVisible: true,\r\n            id: value\r\n        })\r\n    }\r\n    return (\r\n\r\n        <>\r\n            {\r\n                data.map(item => (\r\n                    <Row key={item.id} style={{ margin: '3px' }}>\r\n                        <Col xs={1} lg={1} >\r\n                            <Image\r\n                                width={'20px'}\r\n                                height={'20px'}\r\n                                preview={false}\r\n                                src={item.url}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={18} lg={10}>\r\n                            {item.name}\r\n                        </Col>\r\n                        <Col xs={1} lg={1}>\r\n                            <Popconfirm icon={null} placement=\"left\"\r\n                                okText={<span onClick={() => onClickEdit(item.id)} >Edit</span>}\r\n                                cancelText={<span onClick={() => onClickDelete(item.id)}>Delete</span>}\r\n                            >\r\n                                <MoreOutlined />\r\n                            </Popconfirm>\r\n                        </Col>\r\n                    </Row>)\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Lists","import React from 'react'\r\nimport {\r\n    Modal, Button, Input, Form\r\n} from 'antd';\r\nimport { PlusSquareOutlined } from '@ant-design/icons'\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 20,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 14,\r\n        span: 10,\r\n    },\r\n}\r\n\r\nconst ModalAdd = ({ data, setData, stateModal, setStateModal }) => {\r\n    const [form] = Form.useForm()\r\n    let itemCrud = data.find(item => item.id === stateModal.id)\r\n    if (itemCrud) {\r\n        form.setFieldsValue({\r\n            name: itemCrud.name,\r\n            url: itemCrud.url\r\n        })\r\n    }\r\n\r\n    const showModal = () => {\r\n        form.resetFields()\r\n        setStateModal({\r\n            isModalVisible: true,\r\n            id: ''\r\n        })\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setStateModal(false);\r\n    }\r\n    const onFinish = (values) => {\r\n        if (stateModal.id) {\r\n            let dataEdit = data.map(d => d.id === stateModal.id ? { ...values, id: d.id } : d)\r\n            localStorage.setItem(\"crud\", JSON.stringify(dataEdit))\r\n            setStateModal({\r\n                isModalVisible: false,\r\n                id: ''\r\n            })\r\n            setData([...dataEdit])\r\n        } else {\r\n            let id = Date.now().toString(36)\r\n            data.unshift({ ...values, id })\r\n            localStorage.setItem(\"crud\", JSON.stringify(data))\r\n            setStateModal({\r\n                isModalVisible: false,\r\n                id: ''\r\n            })\r\n            setData([...data])\r\n        }\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={showModal}\r\n                icon={<PlusSquareOutlined />}\r\n                type=\"primary\"\r\n                style={{ margin: '10px' }}\r\n            >\r\n                Create\r\n            </Button>\r\n            <Modal title={stateModal.id ? \"Edit bookmark\" : \"Add bookmark\"}\r\n                style={{ top: 10 }}\r\n                visible={stateModal.isModalVisible}\r\n                closable={false}\r\n                footer={null}\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    {...layout}\r\n                    name=\"basic\"\r\n                    initialValues={{\r\n                        remember: true,\r\n                    }}\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                >\r\n                    <Form.Item\r\n                        label=\"name\"\r\n                        name=\"name\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your name!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"url\"\r\n                        name=\"url\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your url!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button key=\"back\" onClick={handleCancel}>\r\n                            Cancel\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" htmlType=\"submit\">\r\n                            Save\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModalAdd","import React, { useState } from 'react'\r\nimport Lists from './lists'\r\nimport ModalAdd from './modalAdd'\r\nconst ListCrud = () => {\r\n    const [data, setData] = useState(JSON.parse(localStorage.getItem(\"crud\")) || [])\r\n    const [stateModal, setStateModal] = useState({\r\n        isModalVisible: false,\r\n        id: ''\r\n    })\r\n    return (\r\n        <>\r\n            <ModalAdd\r\n                data={data}\r\n                setData={setData}\r\n                stateModal={stateModal}\r\n                setStateModal={setStateModal}\r\n            />\r\n            <Lists\r\n                data={data}\r\n                setData={setData}\r\n                stateModal={stateModal}\r\n                setStateModal={setStateModal}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListCrud","// import './App.css';\nimport ListCrud from './pages';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ListCrud />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}